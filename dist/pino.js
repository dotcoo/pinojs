const N = [
  "阿富汗",
  "阿拉斯加",
  "阿尔巴尼亚",
  "阿尔及利亚",
  "安道尔",
  "安哥拉",
  "安圭拉岛英",
  "安提瓜和巴布达",
  "阿根廷",
  "亚美尼亚",
  "阿鲁巴岛",
  "阿森松",
  "澳大利亚",
  "奥地利",
  "阿塞拜疆",
  "巴林",
  "孟加拉国",
  "巴巴多斯",
  "白俄罗斯",
  "比利时",
  "伯利兹",
  "贝宁",
  "百慕大群岛",
  "不丹",
  "玻利维亚",
  "波斯尼亚和黑塞哥维那",
  "博茨瓦纳",
  "巴西",
  "保加利亚",
  "布基纳法索",
  "布隆迪",
  "喀麦隆",
  "加拿大",
  "加那利群岛",
  "佛得角",
  "开曼群岛",
  "中非",
  "乍得",
  "智利",
  "圣诞岛",
  "科科斯岛",
  "哥伦比亚",
  "巴哈马国",
  "多米尼克国",
  "科摩罗",
  "刚果",
  "科克群岛",
  "哥斯达黎加",
  "克罗地亚",
  "古巴",
  "塞浦路斯",
  "捷克",
  "丹麦",
  "迪戈加西亚岛",
  "吉布提",
  "多米尼加共和国",
  "厄瓜多尔",
  "埃及",
  "萨尔瓦多",
  "赤道几内亚",
  "厄立特里亚",
  "爱沙尼亚",
  "埃塞俄比亚",
  "福克兰群岛",
  "法罗群岛",
  "斐济",
  "芬兰",
  "法国",
  "法属圭亚那",
  "法属波里尼西亚",
  "加蓬",
  "冈比亚",
  "格鲁吉亚",
  "德国",
  "加纳",
  "直布罗陀",
  "希腊",
  "格陵兰岛",
  "格林纳达",
  "瓜德罗普岛",
  "关岛",
  "危地马拉",
  "几内亚",
  "几内亚比绍",
  "圭亚那",
  "海地",
  "夏威夷",
  "洪都拉斯",
  "匈牙利",
  "冰岛",
  "印度",
  "印度尼西亚",
  "伊郎",
  "伊拉克",
  "爱尔兰",
  "以色列",
  "意大利",
  "科特迪瓦",
  "牙买加",
  "日本",
  "约旦",
  "柬埔塞",
  "哈萨克斯坦",
  "肯尼亚",
  "基里巴斯",
  "朝鲜",
  "韩国",
  "科威特",
  "吉尔吉斯斯坦",
  "老挝",
  "拉脱维亚",
  "黎巴嫩",
  "莱索托",
  "利比里亚",
  "利比亚",
  "列支敦士登",
  "立陶宛",
  "卢森堡",
  "马其顿",
  "马达加斯加",
  "马拉维",
  "马来西亚",
  "马尔代夫",
  "马里",
  "马耳他",
  "马里亚纳群岛",
  "马绍尔群岛",
  "马提尼克",
  "毛里塔尼亚",
  "毛里求斯",
  "马约特岛",
  "墨西哥",
  "密克罗尼西亚",
  "中途岛",
  "摩尔多瓦",
  "摩纳哥",
  "蒙古",
  "蒙特塞拉特岛",
  "摩洛哥",
  "莫桑比克",
  "缅甸",
  "纳米比亚",
  "瑙鲁",
  "尼泊尔",
  "荷兰",
  "荷属安的列斯群岛",
  "新喀里多尼亚群岛",
  "新西兰",
  "尼加拉瓜",
  "尼日尔",
  "尼日利亚",
  "纽埃岛",
  "诺福克岛",
  "挪威",
  "阿曼",
  "帕劳",
  "巴拿马",
  "巴布亚新几内亚",
  "巴拉圭",
  "秘鲁",
  "菲律宾",
  "波兰",
  "葡萄牙",
  "巴基斯坦",
  "波多黎各",
  "卡塔尔",
  "留尼汪岛",
  "罗马尼亚",
  "俄罗斯",
  "卢旺达",
  "东萨摩亚",
  "西萨摩亚",
  "圣马力诺",
  "圣皮埃尔岛及密克隆岛",
  "圣多美和普林西比",
  "沙特阿拉伯",
  "塞内加尔",
  "塞舌尔",
  "新加坡",
  "斯洛伐克",
  "斯洛文尼亚",
  "所罗门群岛",
  "索马里",
  "南非",
  "西班牙",
  "斯里兰卡",
  "圣克里斯托弗和尼维斯",
  "圣赫勒拿",
  "圣卢西亚",
  "圣文森特岛",
  "苏丹",
  "苏里南",
  "斯威士兰",
  "瑞典",
  "瑞士",
  "叙利亚",
  "塔吉克斯坦",
  "坦桑尼亚",
  "泰国",
  "阿拉伯联合酋长国",
  "多哥",
  "托克劳群岛",
  "汤加",
  "特立尼达和多巴哥",
  "突尼斯",
  "土耳其",
  "土库曼斯坦",
  "特克斯和凯科斯群岛",
  "图瓦卢",
  "美国",
  "乌干达",
  "乌克兰",
  "英国",
  "乌拉圭",
  "乌兹别克斯坦",
  "瓦努阿图",
  "梵蒂冈",
  "委内瑞拉",
  "越南",
  "维尔京群岛",
  "维尔京群岛和圣罗克伊",
  "威克岛",
  "瓦里斯和富士那群岛",
  "西撒哈拉",
  "也门",
  "南斯拉夫",
  "扎伊尔",
  "赞比亚",
  "桑给巴尔",
  "津巴布韦",
  "中华人民共和国",
  "中国"
], R = [
  "北京市",
  "上海市",
  "天津市",
  "重庆市",
  "内蒙古自治区",
  "山西省",
  "河北省",
  "吉林省",
  "江苏省",
  "辽宁省",
  "黑龙江省",
  "安徽省",
  "山东省",
  "浙江省",
  "江西省",
  "福建省",
  "湖南省",
  "湖北省",
  "河南省",
  "广东省",
  "广西壮族自治区",
  "贵州省",
  "海南省",
  "四川省",
  "云南省",
  "陕西省",
  "甘肃省",
  "宁夏回族自治区",
  "青海省",
  "新疆维吾尔自治区",
  "西藏自治区",
  "台湾省",
  "香港特别行政区",
  "澳门特别行政区"
], D = {
  北京: "beijing",
  上海: "shanghai",
  天津: "tianjin",
  重庆: "chongqing",
  呼和浩特: "huhehaote",
  太原: "taiyuan",
  石家庄: "shijiazhuang",
  长春: "changchun",
  南京: "nanjing",
  沈阳: "shenyang",
  哈尔滨: "haerbin",
  合肥: "hefei",
  济南: "jinan",
  杭州: "hangzhou",
  南昌: "nanchang",
  福州: "fuzhou",
  长沙: "changsha",
  武汉: "wuhan",
  郑州: "zhengzhou",
  广州: "guangzhou",
  南宁: "nanning",
  贵阳: "guiyang",
  海口: "haikou",
  成都: "chengdu",
  昆明: "kunming",
  西安: "xian",
  兰州: "lanzhou",
  银川: "yinchuan",
  西宁: "xining",
  乌鲁木齐: "wulumuqi",
  拉萨: "lasa",
  台北: "taibei",
  香港: "xianggang",
  澳门: "aomen",
  兴安盟: "xinganmeng",
  桂林: "guilin",
  辛集: "xinji",
  邯郸: "handan",
  通辽: "tongliao",
  辽阳: "liaoyang",
  兴城: "xingcheng",
  北镇: "beizhen",
  阜新: "fuxin",
  嘉兴: "jiaxing",
  齐齐哈尔: "qiqihaer",
  淮安: "huaian",
  张家港: "zhangjiagang",
  海门: "haimen",
  六安: "liuan",
  巢湖: "chaohu",
  马鞍山: "maanshan",
  永安: "yongan",
  宁德: "ningde",
  嘉禾: "jiahe",
  荆门: "jingmen",
  潜江: "qianjiang",
  大冶: "daye",
  宜都: "yidu",
  佛山: "foshan",
  深圳: "shenzhen",
  潮州: "chaozhou",
  惠州: "huizhou",
  汕尾: "shanwei",
  东莞: "dongguan",
  梧州: "wuzhou",
  柳州: "liuzhou",
  合山: "heshan",
  六盘水: "liupanshui",
  关岭: "guanling",
  铁岭: "tieling"
}, I = Object.keys(D), L = [
  "西夏",
  "永川",
  "秀英",
  "高港",
  "清城",
  "兴山",
  "锡山",
  "清河",
  "龙潭",
  "华龙",
  "海陵",
  "滨城",
  "东丽",
  "高坪",
  "沙湾",
  "平山",
  "城北",
  "海港",
  "沙市",
  "双滦",
  "长寿",
  "山亭",
  "南湖",
  "浔阳",
  "南长",
  "友好",
  "安次",
  "翔安",
  "沈河",
  "魏都",
  "西峰",
  "萧山",
  "金平",
  "沈北新",
  "孝南",
  "上街",
  "城东",
  "牧野",
  "大东",
  "白云",
  "花溪",
  "南山",
  "新城",
  "怀柔",
  "六枝特",
  "涪城",
  "清浦",
  "南溪",
  "淄川",
  "高明",
  "东城",
  "崇文",
  "朝阳",
  "大兴",
  "房山",
  "门头沟",
  "黄浦",
  "徐汇",
  "静安",
  "普陀",
  "闵行",
  "和平",
  "蓟州",
  "永川",
  "长寿",
  "璧山",
  "合川",
  "梁平",
  "丰都",
  "江北",
  "金水",
  "二七",
  "中原",
  "管城",
  "惠济",
  "高新",
  "经开",
  "郑东",
  "港区",
  "巩义",
  "上街",
  "荥阳",
  "中牟",
  "登封",
  "新密",
  "新郑"
], A = [
  "市",
  "区",
  "县"
], C = [
  "一马路",
  "三全路",
  "三马路",
  "东大街",
  "东风东路",
  "东风南路",
  "东风路",
  "丰乐路",
  "丰产路",
  "丰庆路",
  "二七路",
  "二马路",
  "京广路",
  "人民路",
  "伊河路",
  "伏牛路",
  "众意西路",
  "众意路",
  "兴隆街",
  "农业东路",
  "农业南路",
  "农业路",
  "农科路",
  "冬青街",
  "凤亭路",
  "凤仪路",
  "凤苑路",
  "出航路",
  "功铭路",
  "化工路",
  "华山路",
  "南阳路",
  "合欢街",
  "商城路",
  "国基路",
  "垂柳路",
  "城东路",
  "城北路",
  "城南路",
  "太康路",
  "太湖路",
  "如意西路",
  "如意路",
  "宏河路",
  "山桃路",
  "嵩山路",
  "巡航路",
  "巢湖路",
  "工人路",
  "幸福路",
  "庆丰街",
  "建设路",
  "开航路",
  "政一街",
  "政三街",
  "政二街",
  "春兰路",
  "春藤路",
  "林科路",
  "枫杨街",
  "桐柏路",
  "梧桐街",
  "梯航路",
  "棉织路",
  "汝河路",
  "江山路",
  "沁河路",
  "洛河路",
  "洪泽湖大道",
  "淮河路",
  "玉兰街",
  "瑞达路",
  "电厂路",
  "白桦街",
  "石楠路",
  "碧桃路",
  "福寿街",
  "科学大道",
  "秦岭路",
  "红专路",
  "红旗路",
  "红梅街",
  "纬一路",
  "纬三路",
  "纬二路",
  "纺织街",
  "经一路",
  "经三路",
  "经二路",
  "绿梅街",
  "翠竹街",
  "航海路",
  "芙蓉路",
  "花园路",
  "药厂街",
  "莲花街",
  "西大街",
  "西站路",
  "通泰路",
  "鄱阳湖路",
  "金梭路",
  "金水东路",
  "金水路",
  "银屏路",
  "长兴路",
  "长椿路",
  "陇海路",
  "雪松路",
  "领航路",
  "颍河路",
  "黄河东路",
  "黄河南路"
], E = [
  "世贸大厦",
  "东方鼎盛中心",
  "中华大厦",
  "中原万达广场",
  "中国人保大厦",
  "中油新澳大厦",
  "中科金座",
  "五行嘉园",
  "亚新广场",
  "亚星SOHO国际",
  "企业壹号大厦",
  "传媒创意中心",
  "佳田国际广场",
  "兰德中心",
  "兴达国贸",
  "凯利大厦",
  "创艺中心",
  "升龙大厦",
  "升龙广场",
  "升龙环球大厦",
  "华林新时代广场",
  "名门国际中心",
  "商都世贸中心",
  "嘉亿东方大厦",
  "国家863中部软件园",
  "国家开发银行",
  "国泰财富中心",
  "国际商会大厦",
  "基正聚源国际",
  "天一大厦",
  "威斯顿广场",
  "宏光协和城邦",
  "广地和顺中心",
  "康桥商务广场",
  "建业凯旋广场",
  "建业总部港",
  "建正东方中心",
  "新芒果大厦",
  "方圆创世国际",
  "易元国际写字楼",
  "景峰国际",
  "格拉姆",
  "楷林IFC",
  "楷林中心",
  "楷林国际",
  "正商和谐大厦",
  "正商经开广场",
  "正岩大厦",
  "正岩铂兹中心",
  "民生银行大厦",
  "永和国际广场",
  "永和宇宙星写字楼",
  "浦发国际金融中心",
  "海赋国际写字楼",
  "瀚海璞丽中心",
  "王鼎国贸大厦写字楼",
  "王鼎国际",
  "盛润白宫",
  "科技财智名座",
  "立基上东国际",
  "绿地世纪峰会",
  "绿地中心千玺广场",
  "绿地之窗",
  "绿地原盛国际",
  "绿地峰会天下",
  "绿地新都会",
  "美侨世纪广场",
  "美盛中心",
  "联合中心大厦",
  "苏荷中心",
  "行署国际广场",
  "裕鸿国际",
  "豫航中心",
  "财信大厦",
  "绿地中心",
  "金城国贸",
  "金成东方国际",
  "金成时代广场写字楼",
  "龙湖大厦",
  "兴业大厦",
  "雅宝东方国际",
  "顺驰第一国际",
  "领秀国际中心"
], F = [
  "A座",
  "B座",
  "C座",
  "D座",
  "E座",
  "F座"
], P = [
  "一处庭院",
  "七里香堤",
  "万龙花园",
  "世茂云尚城",
  "世豪小公馆",
  "东城花园",
  "东文雅小区",
  "东方梦园",
  "东润泰和",
  "东瑞佳苑",
  "中建文苑",
  "中方园",
  "中海锦苑",
  "中联花园",
  "中鼎花园",
  "丰乐花苑",
  "丰庆佳苑",
  "丰庆华府",
  "丽水人家",
  "九锦台",
  "京广花园",
  "人和花园",
  "亿安花园",
  "伍号院",
  "佳河园",
  "佳苑小区",
  "假日蓝湾",
  "关虎屯小区",
  "兴达公寓",
  "冯庄小区",
  "凤凰台花园",
  "凤凰苑",
  "北云鹤花园",
  "北晨颐商苑",
  "北苑家园",
  "升龙玺园",
  "华园华庭",
  "华瑞紫薇苑",
  "博瑞盛和苑",
  "原田花园",
  "发展南郡",
  "可乐公寓",
  "呈祥花园",
  "商城花园",
  "嘉佰丽园",
  "嘉和园",
  "嘉瑞园",
  "嘉秀园",
  "嘉辰丽景苑",
  "嘉辰时代公寓",
  "四季花城",
  "四月天",
  "国泰一品庄园",
  "国泰罗马假日",
  "国贸新领地",
  "国贸酒店公寓",
  "国鑫小时代",
  "圣菲城",
  "城南春天",
  "城市之星",
  "外商公寓",
  "天伦水晶城",
  "天擎花园",
  "天福苑",
  "太极公馆",
  "奥兰和园",
  "安泰嘉园",
  "宏达花苑",
  "宏都花园",
  "家和万世家园",
  "富邦铭邸",
  "山顶御金城",
  "广兴航海花城",
  "康华苑小区",
  "康宁居",
  "康普新巷",
  "康桥康城",
  "康桥悦岛",
  "建业香槟圣园",
  "御府三号",
  "恒升家园",
  "恒升府第",
  "惠工小区",
  "数码公寓",
  "文化绿城",
  "文华苑",
  "文博公寓",
  "文博名门",
  "文博花园",
  "文雅小区",
  "文雅新世界",
  "方圆创世",
  "时代骏庭",
  "明天花园",
  "明辉小区",
  "朝阳小区",
  "未来丽景苑",
  "未来和枫苑",
  "核勘苑",
  "梦苑小区",
  "森林阳光花园",
  "橄榄城新公馆",
  "橡树玫瑰城",
  "正商中州城",
  "正商创富欣城",
  "正商华钻",
  "正商城",
  "正商幸福港湾",
  "正商新蓝钻",
  "正弘蓝堡湾",
  "正馨花园",
  "民安尚郡",
  "永丰心座",
  "永丰新城",
  "永丰新都",
  "永威城",
  "永恒亲亲家园",
  "永恒理想世界",
  "汇宝花园",
  "汉飞城市公园",
  "江山名典",
  "河畔人家",
  "泰宏建业国际城",
  "泰山誉景",
  "海轮城市风铃",
  "海通苑",
  "清华紫光园",
  "源升府邻竹园",
  "源升金锣湾",
  "滨河花园",
  "瀚海思念城",
  "瀚海泰苑",
  "琥珀名城",
  "百草园",
  "盈家美地",
  "益兴花园",
  "盛润小城之春",
  "碧桂园天麓",
  "紫东苑",
  "紫云小区",
  "紫南花园",
  "紫域云庭",
  "紫燕华庭",
  "紫竹小区",
  "紫竹轩",
  "紫荆小区",
  "紫荆苑",
  "紫荆阳光地带",
  "紫薇小区",
  "紫藤苑",
  "紫金城",
  "红楼易居",
  "维也纳森林",
  "绿云都市家园",
  "绿洲云顶",
  "绿洲花园",
  "绿洲银郡",
  "绿都紫荆华庭",
  "美景美境",
  "美景花郡",
  "美盛教育港湾",
  "翠和园",
  "翠园锦荣世家",
  "翡丽公馆",
  "联创佳苑",
  "联合家园",
  "联合花园",
  "联合雅园",
  "舒馨花园",
  "花半里",
  "花都港湾",
  "苗圃小区",
  "英地天骄华庭",
  "裕华文桂园",
  "裕鸿花园",
  "西里小区",
  "豫新公寓",
  "豫港花苑",
  "远征都市花园",
  "通利紫荆尚都",
  "郁金香苑",
  "都市花园",
  "都市铭座",
  "金印现代城",
  "金印阳光城",
  "金晨嘉园",
  "金桂苑",
  "金桥小区",
  "金水万达",
  "金祥花园",
  "金誉良苑",
  "金领寓",
  "鑫苑世家",
  "鑫苑国际新城",
  "锦华苑",
  "锦艺新时代",
  "阳光铭座",
  "陇东小区",
  "陇海里小区",
  "隆达小区",
  "雅美新居",
  "集业小区",
  "青年居易",
  "青秀佳苑",
  "香桔市",
  "龙源世纪龙城"
];
function Y() {
  return this.random(this.data.address_countries);
}
function U() {
  return this.random(this.data.address_provinces);
}
function W() {
  return this.random(this.data.address_cities);
}
function H() {
  return "市";
}
function X() {
  return this.random(this.data.address_cities) + "市";
}
function V() {
  return this.random(this.data.address_districts);
}
function K() {
  return this.random(this.data.address_districts_suffixes);
}
function J() {
  return this.random(this.data.address_districts) + this.random(this.data.address_districts_suffixes);
}
function Q() {
  return this.random(this.data.address_streets);
}
function Z() {
  return this.number(1, 366, 0) + "号";
}
function nn() {
  return this.random(this.data.address_streets) + this.street_number();
}
function tn() {
  return this.random(this.data.address_buildings);
}
function en() {
  return this.random(this.data.address_buildings_units);
}
function an() {
  return this.number(1, 31, 0) + this.number(1, 31, 0).toString().padStart(2, 0) + "室";
}
function sn() {
  return this.random(this.data.address_buildings) + this.random(this.data.address_buildings_units) + this.building_number();
}
function on() {
  return this.random(this.data.address_communities);
}
function un() {
  return this.number(1, 7, 0) + "号楼" + this.number(1, 4, 0) + "单元";
}
function rn() {
  return this.number(1, 21, 0) + "楼" + this.number(1, 121, 0) + "号";
}
function hn() {
  return this.random(this.data.address_communities) + this.community_unit() + this.community_number();
}
function gn(i = !1) {
  return (i ? this.country() : "") + this.province() + this.city() + this.district() + this.street() + this.building();
}
function ln(i = !1) {
  return (i ? this.country() : "") + this.province() + this.city() + this.district() + this.street() + this.community();
}
function dn() {
  return this.home_address();
}
function cn() {
  return this.number(1e5, 999999, 0);
}
function mn(i) {
  i.registers({
    // data
    address_countries: N,
    address_provinces: R,
    address_cities_data: D,
    address_cities: I,
    address_districts: L,
    address_districts_suffixes: A,
    address_streets: C,
    address_buildings: E,
    address_buildings_units: F,
    address_communities: P,
    // methods
    country: Y,
    province: U,
    city_name: W,
    city_suffix: H,
    city: X,
    district_name: V,
    district_suffix: K,
    district: J,
    street_name: Q,
    street_number: Z,
    street: nn,
    building_name: tn,
    building_unit: en,
    building_number: an,
    building: sn,
    community_name: on,
    community_unit: un,
    community_number: rn,
    community: hn,
    home_address: ln,
    office_address: gn,
    address: dn,
    postcode: cn
  });
}
const fn = {
  北京: "京",
  天津: "津",
  河北: "冀",
  山西: "晋",
  内蒙: "蒙",
  辽宁: "辽",
  吉林: "吉",
  黑龙: "黑",
  上海: "沪",
  江苏: "苏",
  浙江: "浙",
  安徽: "皖",
  福建: "闽",
  江西: "赣",
  山东: "鲁",
  河南: "豫",
  湖北: "鄂",
  湖南: "湘",
  广东: "粤",
  广西: "桂",
  海南: "琼",
  重庆: "渝",
  四川: "川",
  贵州: "贵",
  云南: "云",
  西藏: "藏",
  陕西: "陕",
  甘肃: "甘",
  青海: "青",
  宁夏: "宁",
  新疆: "新"
}, _n = [
  "京",
  "津",
  "冀",
  "晋",
  "蒙",
  "辽",
  "吉",
  "黑",
  "沪",
  "苏",
  "浙",
  "皖",
  "闽",
  "赣",
  "鲁",
  "豫",
  "鄂",
  "湘",
  "粤",
  "桂",
  "琼",
  "渝",
  "川",
  "贵",
  "云",
  "藏",
  "陕",
  "甘",
  "青",
  "宁",
  "新"
];
function yn(i) {
  return this.data.automotive_names[i.substring(0, 2)];
}
function bn() {
  return this.random(this.data.automotive_names);
}
function pn() {
  return this.string(1, "ABCDEFGHJKLMNPQRSTUVWXYZ");
}
function wn() {
  return this.random(this.data.automotive_names) + this.string(1, "ABCDEFGHJKLMNPQRSTUVWXYZ") + this.string(5, "ABCDEFGHJKLMNPQRSTUVWXYZ01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
}
function xn(i) {
  i.registers({
    // data
    automotive_provinces: fn,
    automotive_names: _n,
    // method
    license_plate_p2n: yn,
    license_plate_province: bn,
    license_plate_city: pn,
    license_plate: wn
  });
}
const jn = [
  "AliceBlue",
  "AntiqueWhite",
  "Aqua",
  "Aquamarine",
  "Azure",
  "Beige",
  "Bisque",
  "Black",
  "BlanchedAlmond",
  "Blue",
  "BlueViolet",
  "Brown",
  "BurlyWood",
  "CadetBlue",
  "Chartreuse",
  "Chocolate",
  "Coral",
  "CornflowerBlue",
  "Cornsilk",
  "Crimson",
  "Cyan",
  "DarkBlue",
  "DarkCyan",
  "DarkGoldenRod",
  "DarkGray",
  "DarkGreen",
  "DarkKhaki",
  "DarkMagenta",
  "DarkOliveGreen",
  "Darkorange",
  "DarkOrchid",
  "DarkRed",
  "DarkSalmon",
  "DarkSeaGreen",
  "DarkSlateBlue",
  "DarkSlateGray",
  "DarkTurquoise",
  "DarkViolet",
  "DeepPink",
  "DeepSkyBlue",
  "DimGray",
  "DodgerBlue",
  "Feldspar",
  "FireBrick",
  "FloralWhite",
  "ForestGreen",
  "Fuchsia",
  "Gainsboro",
  "GhostWhite",
  "Gold",
  "GoldenRod",
  "Gray",
  "Green",
  "GreenYellow",
  "HoneyDew",
  "HotPink",
  "IndianRed",
  "Indigo",
  "Ivory",
  "Khaki",
  "Lavender",
  "LavenderBlush",
  "LawnGreen",
  "LemonChiffon",
  "LightBlue",
  "LightCoral",
  "LightCyan",
  "LightGoldenRodYellow",
  "LightGrey",
  "LightGreen",
  "LightPink",
  "LightSalmon",
  "LightSeaGreen",
  "LightSkyBlue",
  "LightSlateBlue",
  "LightSlateGray",
  "LightSteelBlue",
  "LightYellow",
  "Lime",
  "LimeGreen",
  "Linen",
  "Magenta",
  "Maroon",
  "MediumAquaMarine",
  "MediumBlue",
  "MediumOrchid",
  "MediumPurple",
  "MediumSeaGreen",
  "MediumSlateBlue",
  "MediumSpringGreen",
  "MediumTurquoise",
  "MediumVioletRed",
  "MidnightBlue",
  "MintCream",
  "MistyRose",
  "Moccasin",
  "NavajoWhite",
  "Navy",
  "OldLace",
  "Olive",
  "OliveDrab",
  "Orange",
  "OrangeRed",
  "Orchid",
  "PaleGoldenRod",
  "PaleGreen",
  "PaleTurquoise",
  "PaleVioletRed",
  "PapayaWhip",
  "PeachPuff",
  "Peru",
  "Pink",
  "Plum",
  "PowderBlue",
  "Purple",
  "Red",
  "RosyBrown",
  "RoyalBlue",
  "SaddleBrown",
  "Salmon",
  "SandyBrown",
  "SeaGreen",
  "SeaShell",
  "Sienna",
  "Silver",
  "SkyBlue",
  "SlateBlue",
  "SlateGray",
  "Snow",
  "SpringGreen",
  "SteelBlue",
  "Tan",
  "Teal",
  "Thistle",
  "Tomato",
  "Turquoise",
  "Violet",
  "VioletRed",
  "Wheat",
  "White",
  "WhiteSmoke",
  "Yellow",
  "YellowGreen"
];
function zn() {
  return this.random(this.data.color_names);
}
function Sn() {
  return `#${this.uint8().toString(16).padStart(2, 0)}${this.uint8().toString(16).padStart(2, 0)}${this.uint8().toString(16).padStart(2, 0)}`;
}
function kn() {
  return `#${this.uint8().toString(16).padStart(2, 0)}${this.uint8().toString(16).padStart(2, 0)}${this.uint8().toString(16).padStart(2, 0)}`;
}
function qn() {
  return `rgb(${this.uint8()},${this.uint8()},${this.uint8()})`;
}
function Mn() {
  return `rgba(${this.uint8()},${this.uint8()},${this.uint8()},${Math.random().toFixed(2)})`;
}
function $n(i, n, t, e = 160) {
  return Math.max(Math.abs(i - t), Math.abs(n - i), Math.abs(t - n)) >= e;
}
function Bn(i = 160) {
  let n = 0, t = 0, e = 0;
  const a = Math.random().toFixed(2);
  for (; ; )
    if (n = this.uint8(), t = this.uint8(), e = this.uint8(), this.is_colorful(n, t, e, i))
      return [n, t, e, a];
}
function vn() {
  const [i, n, t] = this.random_colorful();
  return `#${i.toString(16).padStart(2, 0)}${n.toString(16).padStart(2, 0)}${t.toString(16).padStart(2, 0)}`;
}
function Dn() {
  const [i, n, t] = this.random_colorful();
  return `#${i.toString(16).padStart(2, 0)}${n.toString(16).padStart(2, 0)}${t.toString(16).padStart(2, 0)}`;
}
function Gn() {
  const [i, n, t] = this.random_colorful();
  return `rgb(${i},${n},${t})`;
}
function On() {
  const [i, n, t, e] = this.random_colorful();
  return `rgba(${i},${n},${t},${e})`;
}
function Tn(i) {
  i.registers({
    // data
    color_names: jn,
    // method
    color_name: zn,
    color: Sn,
    hex_color: kn,
    rgb_color: qn,
    rgba_color: Mn,
    is_colorful: $n,
    random_colorful: Bn,
    colorful: vn,
    hex_colorful: Dn,
    rgb_colorful: Gn,
    rgba_colorful: On
  });
}
const G = {
  超艺: "chaoyi",
  和泰: "hetai",
  九方: "jiufang",
  鑫博: "xinbo",
  腾飞: "tengfei",
  戴硕: "daishuo",
  亿次元: "yiciyuan",
  海创: "haichuang",
  创联世纪: "chuanglianshiji",
  凌云: "lingyun",
  泰麒麟: "taiqilin",
  彩虹: "caihong",
  兰金: "lanjin",
  晖来: "huilai",
  天益: "tianyi",
  恒聪百汇: "hengcongbaihui",
  菊风: "jufeng",
  惠派: "huipai",
  宇通: "yutong",
  创汇: "chuanghui",
  思优: "siyou",
  时空盒数字: "shikongheshuzi",
  易动力: "yidongli",
  飞海: "feihai",
  华泰通安: "huataitongan",
  盟新: "mengxin",
  商软冠联: "shangruanguanlian",
  图龙信息: "tulongxinxi",
  强盛: "qiangsheng",
  华远软件: "huayuanruanjian",
  创亿: "chuangyi",
  时刻: "shike",
  世创: "shichuang",
  明腾: "mingteng",
  良诺: "liangnuo",
  天开: "tiankai",
  毕博诚: "bibocheng",
  快讯: "kuaixun",
  凌颖信息: "lingyingxinxi",
  黄石金承: "huangshijincheng",
  恩悌: "enti",
  雨林木风: "yulinmufeng",
  双敏: "shuangmin",
  维旺明: "weiwangming",
  网新恒天: "wangxinhengtian",
  铭泰: "mingtai",
  飞利信: "feilixin",
  立信: "lixin",
  联通时科: "liantongshike",
  建业: "jianye",
  新格林耐特: "xingelinnaite",
  宇龙: "yulong",
  浙大万朋: "zhedawanpeng",
  讯飞: "xunfei",
  太能: "taineng",
  昂歌: "angge",
  万迅: "wanxun",
  方正: "fangzheng",
  联软: "lianruan",
  七喜: "qixi",
  南康: "nankang",
  银嘉: "yinjia",
  巨奥: "juao",
  佳禾: "jiahe",
  国讯: "guoxun",
  信诚致远: "xinchengzhiyuan",
  浦华众城: "puhuazhongcheng",
  迪摩: "dimo",
  太极: "taiji",
  群英: "qunying",
  合联: "helian",
  同兴万点: "tongxingwandian",
  博凯: "bokai",
  精芯: "jingxin",
  艾提科信: "aitikexin",
  昊嘉: "haojia",
  鸿睿思博: "hongruisibo",
  四通: "sitong",
  富罳: "fusi",
  北兰: "beilan",
  诺依曼: "nuoyiman",
  东方峻景: "dongfangjunjing",
  华成育卓: "huachengyuzhuo",
  趋势: "qushi",
  维涛: "weitao",
  通际名联: "tongjiminglian",
  五菱: "wuling"
}, Nn = Object.keys(G), Rn = [
  "文化",
  "科技",
  "管理",
  "咨询",
  "服务",
  "传播",
  "传媒",
  "信息",
  "国际",
  "影业",
  "电子商务",
  "品牌",
  "商贸",
  "商务",
  "科贸",
  "贸易",
  "广告",
  "教育",
  "体育",
  "设计",
  "生物",
  "图文",
  "建筑",
  "规划",
  "餐饮",
  "医疗",
  "安全",
  "动画",
  "健康",
  "保险",
  "环境"
], In = [
  "有限公司",
  "股份有限公司",
  "集团有限公司"
];
function Ln() {
  return this.random(this.data.company_names);
}
function An(i = this.company_name()) {
  return this.data.company_names_data[i] || "";
}
function Cn() {
  return this.random(this.data.company_types);
}
function En() {
  return this.random(this.data.company_suffixes);
}
function Fn() {
  return `${this.city_name()}${this.random(this.data.company_names)}${this.random(this.data.company_types)}${this.random(this.data.company_suffixes)}`;
}
function Pn() {
  return `${this.random(this.data.company_names)}${this.random(this.data.company_types)}`;
}
function Yn(i) {
  i.registers({
    // data
    company_names_data: G,
    company_names: Nn,
    company_types: Rn,
    company_suffixes: In,
    // method
    company_name: Ln,
    company_name_pinyin: An,
    company_type: Cn,
    company_suffix: En,
    company: Fn,
    company_short: Pn
  });
}
function Un(i, n = /* @__PURE__ */ new Date()) {
  if (typeof i == "number")
    return new Date(i);
  if (typeof i == "string" && (i.startsWith("+") || i.startsWith("-"))) {
    const t = [n.getFullYear(), n.getMonth(), n.getDate(), n.getHours(), n.getMinutes(), n.getSeconds()], e = /([+-]\d+)([ymdhis])/g;
    for (; ; ) {
      const a = e.exec(i.toLowerCase());
      if (!a)
        break;
      const [r, o, s] = a;
      if ("ymdhis".indexOf(s) === -1)
        throw new Error("error unit!");
      t["ymdhis".indexOf(s)] += o - 0;
    }
    return new Date(...t);
  } else {
    if (typeof i == "string" && (i === "today" || i === "now"))
      return /* @__PURE__ */ new Date();
    if (typeof i == "string")
      return new Date(i);
    if (typeof i == "object" && i !== null) {
      const { y: t = 0, m: e = 0, d: a = 0, h: r = 0, i: o = 0, s = 0 } = i, d = new Date(n.getFullYear() + t, n.getMonth() + e + 1, 0);
      return new Date(n.getFullYear() + t, n.getMonth() + e, Math.min(d.getDate(), n.getDate()) + a, n.getHours() + r, n.getMinutes() + o, n.getSeconds() + s);
    } else
      return i;
  }
}
function Wn(i, n = "y-m-d h:i:s") {
  const t = {
    y: i.getFullYear(),
    m: i.getMonth() + 1,
    d: i.getDate(),
    h: i.getHours(),
    i: i.getMinutes(),
    s: i.getSeconds()
  };
  return n.replace(/([ymdhis])/ig, (e, a) => t[a.toLowerCase()].toString().padStart(2, "0"));
}
function Hn(i = 0, n = 4294967295e3, t = "y-m-d h:i:s") {
  return i = this.date_expr(i), n = this.date_expr(n), this.date_format(new Date(this.number(i.getTime(), n.getTime(), 0)), t);
}
function Xn(i) {
  i.registers({
    // data
    // method
    date_expr: Un,
    date_format: Wn,
    date: Hn
  });
}
function Vn(i) {
  const n = {
    width: 600,
    height: 400,
    background: 0,
    foreground: 0,
    format: "png",
    text: ""
  };
  return Object.assign(n, i), n.background = n.background.replace("#", ""), n.foreground = n.foreground.replace("#", ""), `https://dummyimage.com/${n.width}x${n.height}/${n.background}/${n.foreground}.${n.format}?text=${encodeURIComponent(n.text)}`;
}
let g = null, h = null;
function Kn(i) {
  if (typeof window > "u")
    return "";
  (g === null || h === null) && (g = window.document.createElement("canvas"), h = g.getContext("2d"));
  const n = {
    width: 600,
    height: 400,
    background: this.colorful(),
    foreground: this.colorful(),
    text: "",
    font: ""
  };
  return Object.assign(n, i), h.clearRect(0, 0, n.width, n.height), n.text = n.text ? n.text : `${n.width}x${n.height}`, n.textlen = n.text.split("").map((t) => encodeURIComponent(t).length <= 3 ? 1 : 1.2).reduce((t, e) => t + e, 0), n.font = n.font ? n.font : `bold ${Math.floor(n.width / n.textlen)}px '微软雅黑'`, g.width = n.width, g.height = n.height, h.fillStyle = n.background, h.fillRect(0, 0, n.width, n.height), h.font = n.font, h.textAlign = "center", h.textBaseline = "middle", h.fillStyle = n.foreground, h.fillText(n.text, Math.floor(n.width / 2), Math.floor(n.height / 2)), g.toDataURL();
}
function Jn(i, n, t = 0.4) {
  if (typeof window > "u")
    return "";
  (g === null || h === null) && (g = window.document.createElement("canvas"), h = g.getContext("2d")), t /= 2;
  const e = i / 2, a = new Array(i * n).fill(!1);
  let r = 0;
  for (; r / a.length < t; ) {
    const o = Math.random() * 65535 % a.length | 0, s = o % i;
    if (s >= e || a[o])
      continue;
    const d = o / n | 0;
    a[o] = !0, a[i * d + i - 1 - s] = !0, r++;
  }
  if (process.env.NODE_ENV === "development") {
    let o = "";
    for (let s = 0; s < a.length; s++)
      o += a[s] ? "黑" : "  ", (s + 1) % i === 0 && (o += `
`);
    console.log(o);
  }
  return a;
}
function Qn(i) {
  if (typeof window > "u")
    return "";
  (g === null || h === null) && (g = window.document.createElement("canvas"), h = g.getContext("2d"));
  const n = {
    width: 360,
    // 图片宽度
    height: 360,
    // 图片高度
    padding: 20,
    // 边距
    dot: 8,
    // 点行列数
    dot_cols: null,
    // 点列数
    dot_rows: null,
    // 点行数
    diff: 160,
    // 鲜艳度
    color: null,
    // 颜色
    ratio: 0.4
    // 填充比例
  };
  Object.assign(n, i), h.clearRect(0, 0, n.width, n.height), n.dot_cols = n.dot_cols === null ? n.dot : n.dot_cols, n.dot_rows = n.dot_rows === null ? n.dot : n.dot_rows, n.color = this.colorful(n.diff), g.width = n.width, g.height = n.height, h.fillStyle = n.color;
  const t = (n.width - n.padding * 2) / n.dot_cols, e = (n.height - n.padding * 2) / n.dot_rows;
  for (const [a, r] of this.image_random_matrix(n.dot_cols, n.dot_rows, n.ratio).entries())
    if (r) {
      const o = Math.floor(n.padding + t * (a % n.dot_cols)), s = Math.floor(n.padding + e * (a / n.dot_rows | 0));
      h.fillRect(o, s, Math.ceil(t), Math.ceil(e));
    }
  return g.toDataURL();
}
function Zn(i) {
  i.registers({
    // data
    // method
    image_url: Vn,
    image_data_url: Kn,
    image_random_matrix: Jn,
    image_avatar: Qn
  });
}
const ni = [
  "gmail.com",
  "yahoo.com",
  "hotmail.com",
  "outlook.com",
  "live.com",
  "163.com",
  "126.com",
  "yeah.net",
  "qq.com",
  "foxmail.com",
  "sina.com.cn",
  "sohu.com"
], ii = [
  "http",
  "https"
], ti = [
  "com",
  "net",
  "cn",
  "com.cn",
  "net.cn"
], ei = [
  "www",
  "www",
  "www",
  "www",
  "oa",
  "mail",
  "email",
  "disk",
  "im",
  "data",
  "file"
], ai = [
  "app",
  "main",
  "wp-content",
  "search",
  "category",
  "tag",
  "categories",
  "tags",
  "blog",
  "posts",
  "list",
  "explore"
], si = [
  "index",
  "home",
  "search",
  "main",
  "post",
  "homepage",
  "category",
  "register",
  "login",
  "faq",
  "about",
  "terms",
  "privacy",
  "author"
], oi = [
  "html",
  "htm",
  "php",
  "jsp",
  "asp"
];
function ui() {
  return this.random(this.data.internet_tlds);
}
function ri(i = null) {
  return i || this.string(8, "abcdefghijklmnopqrstuvwxy");
}
function hi() {
  return this.random(this.data.internet_hosts);
}
function gi(i = null) {
  return `${this.domain_name(i)}.${this.domain_tld()}`;
}
function li(i = null) {
  return `${this.domain_host()}.${this.domain_name(i)}.${this.domain_tld()}`;
}
function di() {
  return this.random(this.data.internet_free_email_domains);
}
function ci() {
  return `${this.name_pinyin()}@${this.random(this.data.internet_free_email_domains)}`;
}
function mi() {
  return `${this.company_name_pinyin()}.${this.random(this.data.internet_tlds)}`;
}
function fi() {
  return `${this.name_pinyin()}@${this.company_name_pinyin()}.${this.random(this.data.internet_tlds)}`;
}
function _i() {
  return this.free_email();
}
function yi() {
  return this.range(4, this.uint8).join(".");
}
function bi() {
  return this.range(8, this.uint16).map((i) => i.toString(16)).join(":");
}
function pi() {
  return this.range(6, this.uint8).map((i) => i.toString(16).padStart(2, 0)).join(":");
}
function wi() {
  return this.random(this.data.internet_protocols);
}
function xi(i = null) {
  return `${this.protocal()}://${this.domain_host()}.${this.domain_name(i)}.${this.domain_tld()}`;
}
function ji(i = 2) {
  return "/" + this.range(i, () => this.random(this.data.internet_url_paths)).join("/");
}
function zi() {
  return this.random(this.data.internet_url_pages);
}
function Si() {
  return this.random(this.data.internet_url_extensions);
}
function ki(i = null) {
  return `${this.site(i)}${this.url_path()}/${this.url_page()}.${this.url_extension()}`;
}
function qi(i) {
  i.registers({
    // data
    internet_free_email_domains: ni,
    internet_protocols: ii,
    internet_tlds: ti,
    internet_hosts: ei,
    internet_url_paths: ai,
    internet_url_pages: si,
    internet_url_extensions: oi,
    // method
    domain_tld: ui,
    domain_name: ri,
    domain_host: hi,
    domain: gi,
    hostname: li,
    free_email_domain: di,
    free_email: ci,
    company_email_domain: mi,
    company_email: fi,
    email: _i,
    ipv4: yi,
    ipv6: bi,
    mac_address: pi,
    protocal: wi,
    site: xi,
    url_path: ji,
    url_page: zi,
    url_extension: Si,
    url: ki
  });
}
const Mi = [
  "活动",
  "重要",
  "显示",
  "大小",
  "使用",
  "最后",
  "系列",
  "注意",
  "一些",
  "其中",
  "我的",
  "怎么",
  "最新",
  "只要",
  "为了",
  "一下",
  "位置",
  "组织",
  "日期",
  "成功",
  "男人",
  "那些",
  "需要",
  "对于",
  "城市",
  "成为",
  "电影",
  "简介",
  "免费",
  "软件",
  "继续",
  "报告",
  "通过",
  "可以",
  "工程",
  "分析",
  "操作",
  "公司",
  "自己",
  "作品",
  "生活",
  "社区",
  "得到",
  "论坛",
  "必须",
  "提供",
  "电脑",
  "进行",
  "关系",
  "影响",
  "方面",
  "音乐",
  "直接",
  "商品",
  "等级",
  "如何",
  "内容",
  "更新",
  "生产",
  "中文",
  "准备",
  "留言",
  "电子",
  "一切",
  "实现",
  "一直",
  "东西",
  "主题",
  "责任",
  "可能",
  "销售",
  "以上",
  "介绍",
  "人员",
  "发生",
  "她的",
  "女人",
  "游戏",
  "大家",
  "发展",
  "查看",
  "不断",
  "全部",
  "这里",
  "推荐",
  "地址",
  "工作",
  "网站",
  "时候",
  "一样",
  "以及",
  "管理",
  "数据",
  "其实",
  "评论",
  "他们",
  "各种",
  "而且",
  "服务",
  "不是",
  "一定",
  "为什",
  "积分",
  "中心",
  "系统",
  "知道",
  "说明",
  "提高",
  "如此",
  "要求",
  "建设",
  "完成",
  "我们",
  "设计",
  "能力",
  "法律",
  "还是",
  "时间",
  "状态",
  "在线",
  "您的",
  "同时",
  "进入",
  "喜欢",
  "完全",
  "经营",
  "这个",
  "联系",
  "下载",
  "具有",
  "起来",
  "出现",
  "都是",
  "由于",
  "搜索",
  "一次",
  "当前",
  "学校",
  "标题",
  "用户",
  "其他",
  "能够",
  "个人",
  "决定",
  "这么",
  "朋友",
  "标准",
  "到了",
  "选择",
  "汽车",
  "次数",
  "作者",
  "因此",
  "很多",
  "密码",
  "现在",
  "你的",
  "设备",
  "之间",
  "所以",
  "任何",
  "没有",
  "发表",
  "登录",
  "本站",
  "所有",
  "来自",
  "市场",
  "工具",
  "是一",
  "相关",
  "项目",
  "虽然",
  "行业",
  "的人",
  "这些",
  "结果",
  "一种",
  "开始",
  "原因",
  "运行",
  "国际",
  "浏览",
  "有限",
  "表示",
  "大学",
  "品牌",
  "手机",
  "经验",
  "这是",
  "帖子",
  "包括",
  "会员",
  "无法",
  "谢谢",
  "企业",
  "合作",
  "是否",
  "方法",
  "图片",
  "网上",
  "功能",
  "技术",
  "注册",
  "文件",
  "你们",
  "最大",
  "文章",
  "业务",
  "学生",
  "两个",
  "应用",
  "有些",
  "一个",
  "情况",
  "发布",
  "还有",
  "威望",
  "地区",
  "这种",
  "目前",
  "经济",
  "之后",
  "感觉",
  "参加",
  "问题",
  "点击",
  "今年",
  "认为",
  "回复",
  "方式",
  "资料",
  "出来",
  "拥有",
  "类型",
  "来源",
  "以后",
  "主要",
  "专业",
  "不要",
  "就是",
  "资源",
  "客户",
  "可是",
  "阅读",
  "地方",
  "学习",
  "程序",
  "以下",
  "文化",
  "科技",
  "的话",
  "不同",
  "特别",
  "首页",
  "制作",
  "发现",
  "应该",
  "或者",
  "空间",
  "部分",
  "也是",
  "因为",
  "的是",
  "基本",
  "希望",
  "过程",
  "加入",
  "但是",
  "那个",
  "关于",
  "正在",
  "信息",
  "看到",
  "电话",
  "欢迎",
  "广告",
  "作为",
  "如果",
  "什么",
  "只是",
  "研究",
  "一起",
  "增加",
  "质量",
  "不能",
  "网络",
  "不会",
  "他的",
  "精华",
  "解决",
  "帮助",
  "觉得",
  "今天",
  "产品",
  "计划",
  "更多",
  "价格",
  "然后",
  "不过",
  "孩子",
  "环境",
  "类别",
  "开发",
  "名称",
  "处理",
  "那么",
  "只有",
  "投资",
  "当然",
  "历史",
  "比较",
  "一点",
  "非常",
  "事情",
  "语言",
  "教育",
  "根据",
  "这样",
  "一般",
  "详细",
  "支持",
  "已经"
];
function $i() {
  return this.random(this.data.lorem_words);
}
function Bi(i = 200) {
  const n = this.probability(["，", 8], ["。", 2]);
  let t = "";
  for (; t.length < i; )
    t += this.range(this.number(3, 9, 0), this.word).join("") + n();
  return t.substr(0, i - 1) + "。";
}
function vi(i) {
  i.registers({
    // data
    lorem_words: Mi,
    // method
    word: $i,
    text: Bi
  });
}
const O = {
  丁: "ding",
  万: "wan",
  上: "shang",
  丌: "qi",
  丘: "qiu",
  东: "dong",
  严: "yan",
  丰: "feng",
  乌: "wu",
  乐: "le",
  乔: "qiao",
  乜: "mie",
  习: "xi",
  于: "yu",
  云: "yun",
  五: "wu",
  井: "jing",
  亢: "kang",
  人: "ren",
  仇: "chou",
  仉: "zhang",
  从: "cong",
  令: "ling",
  仰: "yang",
  仲: "zhong",
  任: "ren",
  伊: "yi",
  伍: "wu",
  伏: "fu",
  伯: "bo",
  何: "he",
  佘: "she",
  余: "yu",
  佟: "tong",
  佴: "er",
  侯: "hou",
  俞: "yu",
  俟: "si",
  倪: "ni",
  傅: "fu",
  储: "chu",
  元: "yuan",
  充: "chong",
  党: "dang",
  全: "quan",
  公: "gong",
  关: "guan",
  养: "yang",
  冀: "ji",
  冉: "ran",
  农: "nong",
  冯: "feng",
  况: "kuang",
  冶: "ye",
  冷: "leng",
  凌: "ling",
  凤: "feng",
  刁: "diao",
  刘: "liu",
  利: "li",
  别: "bie",
  劳: "lao",
  勾: "gou",
  包: "bao",
  匡: "kuang",
  华: "hua",
  卓: "zhuo",
  单: "dan",
  南: "nan",
  卜: "bu",
  卞: "bian",
  卢: "lu",
  卫: "wei",
  印: "yin",
  危: "wei",
  卻: "que",
  厉: "li",
  厍: "she",
  双: "shuang",
  叔: "shu",
  古: "gu",
  台: "tai",
  史: "shi",
  叶: "ye",
  司: "si",
  吉: "ji",
  后: "hou",
  向: "xiang",
  吕: "lv",
  吴: "wu",
  周: "zhou",
  呼: "hu",
  和: "he",
  咸: "xian",
  哈: "ha",
  唐: "tang",
  商: "shang",
  喻: "yu",
  国: "guo",
  堵: "du",
  墨: "mo",
  壤: "rang",
  夏: "xia",
  夔: "kui",
  太: "tai",
  夹: "jia",
  奚: "xi",
  姓: "xing",
  姚: "yao",
  姜: "jiang",
  姬: "ji",
  娄: "lou",
  子: "zi",
  孔: "kong",
  孙: "sun",
  孟: "meng",
  季: "ji",
  宁: "ning",
  宇: "yu",
  安: "an",
  宋: "song",
  宓: "mi",
  宗: "zong",
  官: "guan",
  宣: "xuan",
  宦: "huan",
  宫: "gong",
  宰: "zai",
  家: "jia",
  容: "rong",
  宿: "su",
  寇: "kou",
  富: "fu",
  寿: "shou",
  封: "feng",
  尉: "wei",
  尚: "shang",
  尤: "you",
  尹: "yin",
  居: "ju",
  屈: "qu",
  屠: "tu",
  山: "shan",
  岑: "cen",
  岳: "yue",
  崔: "cui",
  嵇: "ji",
  巢: "chao",
  左: "zuo",
  巩: "gong",
  巫: "wu",
  巴: "ba",
  帅: "shuai",
  师: "shi",
  席: "xi",
  常: "chang",
  干: "gan",
  平: "ping",
  年: "nian",
  幸: "xing",
  广: "guang",
  庄: "zhuang",
  应: "ying",
  庞: "pang",
  康: "kang",
  庾: "yu",
  廉: "lian",
  廖: "liao",
  延: "yan",
  弓: "gong",
  弘: "hong",
  张: "zhang",
  强: "qiang",
  归: "gui",
  彭: "peng",
  徐: "xu",
  徒: "tu",
  微: "wei",
  怀: "huai",
  惠: "hui",
  慎: "shen",
  慕: "mu",
  戈: "ge",
  戎: "rong",
  成: "cheng",
  戚: "qi",
  戴: "dai",
  房: "fang",
  扈: "hu",
  扶: "fu",
  拓: "tuo",
  支: "zhi",
  政: "zheng",
  敖: "ao",
  文: "wen",
  方: "fang",
  於: "yu",
  施: "shi",
  时: "shi",
  昌: "chang",
  明: "ming",
  易: "yi",
  昝: "zan",
  晁: "chao",
  晋: "jin",
  晏: "yan",
  景: "jing",
  暨: "ji",
  暴: "bao",
  曲: "qu",
  曹: "cao",
  曾: "zeng",
  月: "yue",
  有: "you",
  木: "mu",
  朱: "zhu",
  权: "quan",
  李: "li",
  杜: "du",
  束: "shu",
  杨: "yang",
  杭: "hang",
  松: "song",
  林: "lin",
  柏: "bai",
  查: "cha",
  柯: "ke",
  柳: "liu",
  柴: "chai",
  栾: "luan",
  桂: "gui",
  桑: "sang",
  桓: "huan",
  梁: "liang",
  梅: "mei",
  楚: "chu",
  樊: "fan",
  欧: "ou",
  正: "zheng",
  步: "bu",
  武: "wu",
  殳: "shu",
  段: "duan",
  殷: "yin",
  毋: "wu",
  毕: "bi",
  毛: "mao",
  水: "shui",
  汝: "ru",
  江: "jiang",
  池: "chi",
  汤: "tang",
  汪: "wang",
  汲: "ji",
  沃: "wo",
  沈: "shen",
  沙: "sha",
  法: "fa",
  洪: "hong",
  浦: "pu",
  海: "hai",
  涂: "tu",
  淳: "chun",
  温: "wen",
  游: "you",
  湛: "zhan",
  滑: "hua",
  滕: "teng",
  满: "man",
  漆: "qi",
  潘: "pan",
  澹: "dan",
  濮: "pu",
  焦: "jiao",
  熊: "xiong",
  燕: "yan",
  爱: "ai",
  父: "fu",
  牛: "niu",
  牟: "mou",
  牧: "mu",
  狄: "di",
  狐: "hu",
  王: "wang",
  班: "ban",
  琴: "qin",
  璩: "qu",
  甄: "zhen",
  甘: "gan",
  生: "sheng",
  甫: "fu",
  田: "tian",
  申: "shen",
  白: "bai",
  百: "bai",
  皇: "huang",
  皮: "pi",
  益: "yi",
  盖: "gai",
  盛: "sheng",
  相: "xiang",
  督: "du",
  瞿: "qu",
  石: "shi",
  祁: "qi",
  祖: "zu",
  祝: "zhu",
  禄: "lu",
  福: "fu",
  禹: "yu",
  离: "li",
  秋: "qiu",
  秦: "qin",
  程: "cheng",
  穆: "mu",
  空: "kong",
  窦: "dou",
  章: "zhang",
  童: "tong",
  端: "duan",
  竺: "zhu",
  符: "fu",
  笪: "da",
  第: "di",
  简: "jian",
  管: "guan",
  籍: "ji",
  米: "mi",
  糜: "mi",
  索: "suo",
  红: "hong",
  纪: "ji",
  终: "zhong",
  经: "jing",
  缑: "gou",
  缪: "mou",
  罗: "luo",
  羊: "yang",
  羿: "yi",
  翁: "weng",
  翟: "di",
  耿: "geng",
  聂: "nie",
  胡: "hu",
  胥: "xu",
  能: "neng",
  臧: "zang",
  舌: "she",
  舒: "shu",
  良: "liang",
  艾: "ai",
  芮: "rui",
  花: "hua",
  苍: "cang",
  苏: "su",
  苗: "miao",
  范: "fan",
  茅: "mao",
  茹: "ru",
  荀: "xun",
  荆: "jing",
  荣: "rong",
  莘: "shen",
  莫: "mo",
  萧: "xiao",
  葛: "ge",
  董: "dong",
  蒋: "jiang",
  蒙: "meng",
  蒯: "kuai",
  蒲: "pu",
  蓝: "lan",
  蓟: "ji",
  蓬: "peng",
  蔚: "wei",
  蔡: "cai",
  蔺: "lin",
  薄: "bao",
  薛: "xue",
  虞: "yu",
  融: "rong",
  衡: "heng",
  袁: "yuan",
  裘: "qiu",
  裴: "pei",
  褚: "zhu",
  西: "xi",
  解: "jie",
  言: "yan",
  訾: "zi",
  詹: "zhan",
  计: "ji",
  许: "xu",
  诸: "zhu",
  谈: "tan",
  谢: "xie",
  谭: "tan",
  谯: "qiao",
  谷: "gu",
  贝: "bei",
  贡: "gong",
  贲: "bi",
  费: "fei",
  贺: "he",
  贾: "gu",
  赏: "shang",
  赖: "lai",
  赫: "he",
  赵: "zhao",
  越: "yue",
  跋: "ba",
  路: "lu",
  车: "che",
  轩: "xuan",
  辕: "yuan",
  辛: "xin",
  边: "bian",
  连: "lian",
  迟: "chi",
  逄: "pang",
  通: "tong",
  逯: "lu",
  邓: "deng",
  邢: "xing",
  那: "na",
  邬: "wu",
  邰: "tai",
  邱: "qiu",
  邴: "bing",
  邵: "shao",
  邹: "zou",
  郁: "yu",
  郈: "hou",
  郎: "lang",
  郏: "jia",
  郑: "zheng",
  郗: "xi",
  郜: "gao",
  郝: "hao",
  郦: "li",
  郭: "guo",
  都: "du",
  鄂: "e",
  鄢: "yan",
  酆: "feng",
  里: "li",
  金: "jin",
  钟: "zhong",
  钦: "qin",
  钭: "dou",
  钮: "niu",
  钱: "qian",
  长: "chang",
  门: "men",
  闫: "yan",
  闵: "min",
  闻: "wen",
  闾: "lv",
  阎: "yan",
  阙: "que",
  阚: "kan",
  阮: "ruan",
  阳: "yang",
  阴: "yin",
  陆: "lu",
  陈: "chen",
  陶: "tao",
  隆: "long",
  隗: "wei",
  雍: "yong",
  雕: "diao",
  雷: "lei",
  霍: "huo",
  靳: "jin",
  鞠: "ju",
  韦: "wei",
  韩: "han",
  韶: "shao",
  项: "xiang",
  须: "xu",
  顾: "gu",
  颛: "zhuan",
  颜: "yan",
  饶: "rao",
  马: "ma",
  驷: "si",
  骆: "luo",
  高: "gao",
  鬱: "yu",
  魏: "wei",
  鱼: "yu",
  鲁: "lu",
  鲍: "bao",
  鲜: "xian",
  麻: "ma",
  黄: "huang",
  黎: "li",
  齐: "qi",
  龙: "long",
  龚: "gong"
}, Di = Object.keys(O), _ = {
  潇健: "xiaojian",
  大成: "dacheng",
  贺雄: "hexiong",
  家宇: "jiayu",
  屿: "yu",
  湑凯: "xukai",
  志铭: "zhiming",
  一劼: "yijie",
  博琨: "bokun",
  永澍: "yongshu",
  卓熙: "zhuoxi",
  佳铮: "jiazheng",
  钟炜: "zhongwei",
  凤星: "fengxing",
  金锋: "jinfeng",
  乾宇: "qianyu",
  盛: "sheng",
  颀炜: "qiwei",
  晟卓: "shengzhuo",
  帅: "shuai",
  竟东: "jingdong",
  平琦: "pingqi",
  伟亮: "weiliang",
  璐凯: "lukai",
  肃: "su",
  楷善: "kaishan",
  海阳: "haiyang",
  皓俊: "haojun",
  伟祥: "weixiang",
  晨祎: "chenyi",
  霄泽: "xiaoze",
  沛泽: "peize",
  永旭: "yongxu",
  鹏帆: "pengfan",
  政旭: "zhengxu",
  东阳: "dongyang",
  健强: "jianqiang",
  俊燚: "junyi",
  默然: "moran",
  谨昊: "jinhao",
  国政: "guozheng",
  翊鸿: "yihong",
  千炜: "qianwei",
  尧城: "yaocheng",
  钰伟: "yuwei",
  耀: "yao",
  嘉文: "jiawen",
  健健: "jianjian",
  序: "xu",
  孝金: "xiaojin",
  佳肴: "jiayao",
  天骑: "tianqi",
  泽枫: "zefeng",
  守浩: "shouhao",
  鹏月: "pengyue",
  恒阅: "hengyue",
  泓臻: "hongzhen",
  晶硕: "jingshuo",
  忠元: "zhongyuan",
  华森: "huasen",
  旭畅: "xuchang",
  国强: "guoqiang",
  文治: "wenzhi",
  纪雄: "jixiong",
  嘉衡: "jiaheng",
  伟杰: "weijie",
  兆辉: "zhaohui",
  思成: "sicheng",
  林旭: "linxu",
  少辉: "shaohui",
  星淇: "xingqi",
  昊喆: "haozhe",
  飞扬: "feiyang",
  晓贺: "xiaohe",
  瑀翀: "yuchong",
  仁昭: "renzhao",
  胜涛: "shengtao",
  鸥卜: "oubu",
  云宝: "yunbao",
  瑞涵: "ruihan",
  川: "chuan",
  铠滔: "kaitao",
  明炬: "mingju",
  运乾: "yunqian",
  新富: "xinfu",
  羿灿: "yican",
  锦前: "jinqian",
  伍沐: "wumu",
  威弘: "weihong",
  拯: "zheng",
  江洋: "jiangyang",
  杭杰: "hangjie",
  天鑫: "tianxin",
  雪通: "xuetong",
  茂新: "maoxin",
  泽仕: "zeshi",
  方洋: "fangyang",
  煜杰: "yujie",
  韪铭: "weiming",
  家瑜: "jiayu"
}, Gi = Object.keys(_), y = {
  艳娇: "yanjiao",
  晓思: "xiaosi",
  轶伟: "yiwei",
  晓涵: "xiaohan",
  若晴: "ruoqing",
  铭璇: "mingxuan",
  玉灿: "yucan",
  馥宁: "funing",
  赛琼: "saiqiong",
  恬祎: "tianyi",
  靖雪: "jingxue",
  潇丹: "xiaodan",
  超月: "chaoyue",
  子怡: "ziyi",
  李妃: "lifei",
  瑞鸿: "ruihong",
  芳源: "fangyuan",
  祺钰: "qiyu",
  雅琪: "yaqi",
  配如: "peiru",
  俣佳: "yujia",
  议丹: "yidan",
  雅凡: "yafan",
  梓楠: "zinan",
  坤宇: "kunyu",
  星楠: "xingnan",
  祺琦: "qiqi",
  叶青: "yeqing",
  煜: "yu",
  林凡: "linfan",
  婷文: "tingwen",
  莹雪: "yingxue",
  洢柠: "yining",
  晓薇: "xiaowei",
  馨妍: "xinyan",
  阳阳: "yangyang",
  钰莹: "yuying",
  婉祺: "wanqi",
  紫琼: "ziqiong",
  雨涵: "yuhan",
  昕怡: "xinyi",
  一楠: "yinan",
  天冉: "tianran",
  天茹: "tianru",
  欣彤: "xintong",
  玥涵: "yuehan",
  艳婷: "yanting",
  贺尧: "heyao",
  梦召: "mengzhao",
  禾苗: "hemiao",
  亚捷: "yajie",
  自翼: "ziyi",
  小雅: "xiaoya",
  佳荣: "jiarong",
  贻冉: "yiran",
  淙淙: "congcong",
  玉帆: "yufan",
  雨萌: "yumeng",
  艳非: "yanfei",
  家幸: "jiaxing",
  祺昕: "qixin",
  丽君: "lijun",
  佳淇: "jiaqi",
  泓悦: "hongyue",
  思齐: "siqi",
  懿纯: "yichun",
  艾妮: "aini",
  亦苗: "yimiao",
  静哲: "jingzhe",
  笑蓉: "xiaorong",
  天为: "tianwei",
  砚心: "yanxin",
  伊璇: "yixuan",
  姿: "zi",
  欢: "huan",
  展: "zhan",
  芮颍: "ruiying",
  琼玉: "qiongyu",
  晓函: "xiaohan",
  艺馨: "yixin",
  赛亚: "saiya",
  佳曼: "jiaman",
  馨宁: "xinning",
  紫予: "ziyu",
  石良: "shiliang",
  奥博: "aobo",
  聪敏: "congmin",
  怡雯: "yiwen",
  杨灿: "yangcan",
  雲河: "yunhe",
  怿萱: "yixuan",
  馨玥: "xinyue",
  苏宇: "suyu",
  艺灿: "yican",
  思慧: "sihui",
  铭浛: "minghan",
  博淼: "bomiao",
  艺蒙: "yimeng",
  伊明: "yiming",
  瑞瑞: "ruirui"
}, Oi = Object.keys(y), T = Object.assign({}, _, y), Ti = Object.keys(T), Ni = [
  "客户关系经理/主管",
  "化妆品研发",
  "仓库经理/主管",
  "运动健身",
  "综合业务专员",
  "审核员",
  "市场/营销/拓展经理",
  "调墨技师",
  "飞机维修机械师",
  "网页设计/制作/美工",
  "房地产项目招投标",
  "医药招商",
  "CNC工程师",
  "医疗器械销售代表",
  "学徒工",
  "语音/视频/图形开发工程师",
  "造纸研发",
  "供应链经理",
  "房地产项目/策划经理",
  "包装设计",
  "信息技术专员",
  "医疗器械研发",
  "实验室负责人/工程师",
  "专柜彩妆顾问(BA)",
  "高级客户经理/客户经理",
  "变压器与磁电工程师",
  "游戏界面设计师",
  "市场通路经理/主管",
  "美发店长",
  "美容保健",
  "算法工程师",
  "电分操作员",
  "建筑项目助理",
  "镗工",
  "技术文员/助理",
  "编辑出版",
  "酒店前台",
  "会计经理/会计主管",
  "汽车检验/检测",
  "高级软件工程师"
];
function Ri(i = null, n = null, t = null) {
  this.data.person_last_names_data = i, this.data.person_last_names = Object.keys(this.person_last_names_data), this.data.person_first_names_male_data = n, this.data.person_first_names_male = Object.keys(this.data.person_first_names_male_data), this.data.person_first_names_female_data = t, this.data.person_first_names_female = Object.keys(this.data.person_first_names_female_data), this.data.person_first_names_data = Object.assign({}, n, t), this.data.person_first_names = Object.keys(this.data.person_first_names_data);
}
function Ii() {
  return this.random(this.data.person_last_names);
}
function Li(i = this.last_name()) {
  return this.data.person_last_names_data[i] || "";
}
function Ai() {
  return this.random(this.data.person_first_names_male);
}
function Ci(i = this.first_name_male()) {
  return this.data.person_first_names_male_data[i] || "";
}
function Ei() {
  return this.random(this.data.person_first_names_female);
}
function Fi(i = this.first_name_female()) {
  return this.data.person_first_names_female_data[i] || "";
}
function Pi() {
  return this.random(this.data.person_first_names);
}
function Yi(i = this.first_name()) {
  return this.data.person_first_names_data[i] || "";
}
function Ui() {
  return this.last_name() + this.first_name();
}
function Wi() {
  return this.last_name() + this.first_name_male();
}
function Hi() {
  return this.last_name() + this.first_name_female();
}
function Xi(i = this.name()) {
  return this.last_name_pinyin(i.substr(0, 1)) + this.first_name_pinyin(i.substr(1));
}
function Vi(i = this.name(), n = 0, t = 1) {
  return i.substr(1) in this.data.person_first_names_female_data ? n : t;
}
function Ki(i = this.name()) {
  return this.name_pinyin(i);
}
function Ji() {
  return this.string(10, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`-=");
}
function Qi() {
  return this.random(this.data.person_jobs);
}
function Zi() {
  return `1${this.random([3, 5, 8])}${this.number(1e8, 999999999, 0)}`;
}
function nt(i) {
  i.registers({
    // data
    person_last_names_data: O,
    person_last_names: Di,
    person_first_names_male_data: _,
    person_first_names_male: Gi,
    person_first_names_female_data: y,
    person_first_names_female: Oi,
    person_first_names_data: T,
    person_first_names: Ti,
    person_jobs: Ni,
    // method
    name_update: Ri,
    last_name: Ii,
    last_name_pinyin: Li,
    first_name_male: Ai,
    first_name_male_pinyin: Ci,
    first_name_female: Ei,
    first_name_female_pinyin: Fi,
    first_name: Pi,
    first_name_pinyin: Yi,
    name: Ui,
    name_male: Wi,
    name_female: Hi,
    name_pinyin: Xi,
    gender: Vi,
    username: Ki,
    password: Ji,
    job: Qi,
    phone: Zi
  });
}
function it(i) {
  mn(i), xn(i), Tn(i), Yn(i), Xn(i), Zn(i), qi(i), vi(i), nt(i);
}
const p = -128, w = 127, x = 0, j = 255, z = -32768, S = 32767, k = 0, q = 65535, c = -2147483648, l = 2147483647, m = 0, f = 4294967295, M = Number.MIN_SAFE_INTEGER, $ = Number.MAX_SAFE_INTEGER, B = 0, v = Number.MAX_SAFE_INTEGER;
function tt(...i) {
  return (...n) => this(...i, ...n);
}
function et(...i) {
  const n = /* @__PURE__ */ new Set();
  return (...t) => {
    let e = null;
    do
      e = this(...i, ...t);
    while (n.has(e));
    return n.add(e), e;
  };
}
function u(i) {
  return i.currying = tt, i.unique = et, i;
}
class at {
  constructor() {
    this.data = {}, this.bool = u(this.boolean.bind(this)), this.boolean = u(this.boolean.bind(this)), this.int = u(this.number.bind(this, c, l, 0)), this.int8 = u(this.number.bind(this, p, w, 0)), this.int16 = u(this.number.bind(this, z, S, 0)), this.int32 = u(this.number.bind(this, c, l, 0)), this.int64 = u(this.number.bind(this, M, $, 0)), this.uint = u(this.number.bind(this, m, f, 0)), this.uint8 = u(this.number.bind(this, x, j, 0)), this.uint16 = u(this.number.bind(this, k, q, 0)), this.uint32 = u(this.number.bind(this, m, f, 0)), this.uint64 = u(this.number.bind(this, B, v, 0)), this.float = u(this.number.bind(this, c, l, 1)), this.float8 = u(this.number.bind(this, p, w, 1)), this.float16 = u(this.number.bind(this, z, S, 1)), this.float32 = u(this.number.bind(this, c, l, 1)), this.float64 = u(this.number.bind(this, M, $, 1)), this.ufloat = u(this.number.bind(this, m, f, 1)), this.ufloat8 = u(this.number.bind(this, x, j, 1)), this.ufloat16 = u(this.number.bind(this, k, q, 1)), this.ufloat32 = u(this.number.bind(this, m, f, 1)), this.ufloat64 = u(this.number.bind(this, B, v, 1)), this.number = u(this.number.bind(this, c, l, 0)), this.string = u(this.string.bind(this)), this.range = this.range.bind(this), this.probability = this.probability.bind(this), this.shuffle = this.shuffle.bind(this), this.random = this.random.bind(this), this.register = this.register.bind(this), this.registers = this.registers.bind(this), this.use = this.use.bind(this);
  }
  // ====== types ======
  boolean() {
    return Math.floor(Math.random() * l) % 2 === 1;
  }
  string(n = 8, t = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") {
    let e = "";
    for (let a = 0; a < n; a++)
      e += t.charAt(Math.random() * t.length | 0);
    return e;
  }
  number(n = c, t = l, e = -1, a = n, r = t, o = e) {
    let s = a + Math.random() * (r - a);
    return o > -1 && (s = s.toFixed(o) - 0), s;
  }
  // ====== range ======
  range(...n) {
    let t = 0, e = 0, a = 1, r = (s, d) => s;
    typeof n[n.length - 1] == "function" && (r = n.pop()), n.length === 1 ? e = n[0] : n.length === 2 ? (t = n[0], e = n[1]) : n.length === 3 && (t = n[0], e = n[1], a = n[2]);
    const o = [];
    if (t > e && a >= 0)
      throw new Error("Start is greater than end and step size is greater than or equal to 0!");
    for (let s = t; t < e ? s <= e : s >= e; s += a)
      o.push(r.length > 0 ? r(s, o) : r());
    return o;
  }
  // ====== probability ======
  probability(...n) {
    const t = (...r) => {
      const o = [];
      for (const [s, d] of r)
        for (let b = 0; b < d; b++)
          o.push(s);
      return this.shuffle(o);
    };
    let e = [], a = 0;
    return (r, o) => {
      a >= e.length && (e = t(...n), a = 0);
      const s = e[a++];
      return typeof s == "function" ? s(r, o) : s;
    };
  }
  // ====== tools ======
  // Fisher–Yates https://bost.ocks.org/mike/shuffle/compare.html
  shuffle(n) {
    let t = n.length, e, a;
    for (; t; )
      a = Math.floor(Math.random() * t--), e = n[t], n[t] = n[a], n[a] = e;
    return n;
  }
  random(n) {
    return n[Math.random() * l % n.length | 0];
  }
  // ====== extension ======
  register(n, t) {
    typeof t == "function" ? this[n] = u(t.bind(this)) : this.data[n] = t;
  }
  registers(n) {
    for (const t in n) {
      const e = n[t];
      this.register(t, e);
    }
  }
  use(n) {
    return typeof n == "function" ? n(this) : n.install(this), this;
  }
}
const st = new at();
st.use(it);
export {
  $ as MAX_BIGINT,
  w as MAX_BYTE,
  l as MAX_INT,
  S as MAX_SHORT,
  v as MAX_UBIGINT,
  j as MAX_UBYTE,
  f as MAX_UINT,
  q as MAX_USHORT,
  M as MIN_BIGINT,
  p as MIN_BYTE,
  c as MIN_INT,
  z as MIN_SHORT,
  B as MIN_UBIGINT,
  x as MIN_UBYTE,
  m as MIN_UINT,
  k as MIN_USHORT,
  at as Pino,
  tt as currying,
  st as default,
  et as unique,
  u as x
};
